/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2020 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * amazing surf from Mandelbulber3D. Formula proposed by Kali, with features added by DarkBeam
 *
 * This formula has a c.x c.y SWAP
 *
 * @reference
 * http://www.fractalforums.com/mandelbulb-3d/custom-formulas-and-transforms-release-t17106/

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the file "fractal_amazing_surf.cpp" in the folder formula/definition
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 AmazingSurfM3dIteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	// update aux->actualScale
	aux->actualScale =
			fractal->transformCommon.scale015
				+ fractal->mandelboxVary4D.scaleVary * (fabs(aux->actualScale) - 1.0f);
	REAL4 oldZ = z;
	z.x = fabs(z.x + fractal->transformCommon.additionConstant111.x)
				- fabs(z.x - fractal->transformCommon.additionConstant111.x) - z.x;
	z.y = fabs(z.y + fractal->transformCommon.additionConstant111.y)
				- fabs(z.y - fractal->transformCommon.additionConstant111.y) - z.y;
	REAL4 zCol = z;
	// no z fold

	REAL rr;
	if (!fractal->transformCommon.functionEnabledFalse) rr = dot(z, z);
	else rr = sqrt(z.x * z.x + z.y * z.y + z.z * z.z);

	REAL m = aux->actualScale;
	REAL MinR = fractal->mandelbox.mR2;
	if (rr < MinR) m = m / MinR;
	else if (rr < 1.0f) m = m / rr;

	z *= m;
	aux->DE = aux->DE * fabs(m) + 1.0f;

	if (fractal->transformCommon.addCpixelEnabled)
		z += aux->const_c * fractal->transformCommon.constantMultiplier111;

	z += fractal->transformCommon.offsetA000;

	REAL temp = fractal->transformCommon.rotation.z * M_PI_180_F;
	REAL sinan = sin(temp);
	REAL cosan = cos(temp);
	temp = z.x;
	z.x = z.x * cosan - z.y * sinan;
	z.y = temp * sinan + z.y * cosan;

	temp = fractal->transformCommon.rotation.y * M_PI_180_F;
	sinan = sin(temp);
	cosan = cos(temp);
	temp = z.z;
	z.z = z.z * cosan - z.x * sinan;
	z.x = temp * sinan + z.x * cosan;

	temp = fractal->transformCommon.rotation.x * M_PI_180_F;
	sinan = sin(temp);
	cosan = cos(temp);
	temp = z.y;
	z.y = z.y * cosan - z.z * sinan;
	z.z = temp * sinan + z.z * cosan;

	if (fractal->foldColor.auxColorEnabledFalse)
	{
		REAL colorAdd = 0.0;
		if (aux->i >= fractal->foldColor.startIterationsA
				&& aux->i < fractal->foldColor.stopIterationsA)
		{
			zCol = fabs(zCol - oldZ);
			if (zCol.x > 0.0)
				colorAdd += fractal->foldColor.difs0000.x * zCol.x;
			if (zCol.y > 0.0)
				colorAdd += fractal->foldColor.difs0000.y * zCol.y;
			colorAdd += fractal->foldColor.difs0000.z * fabs(z.z);
			colorAdd += fractal->foldColor.difs0000.w * m;
		}
		aux->color += colorAdd;
	}
	return z;
}
