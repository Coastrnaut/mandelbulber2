/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Adds Cpixel constant to z vector

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the file "fractal_transf_add_cpixel.cpp" in the folder formula/definition
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 TransfAddCpixelInvertIteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	REAL4 pc = aux->const_c;

	if (!fractal->transformCommon.functionEnabledAxFalse) pc.x = 1.0 / pc.x;
	if (!fractal->transformCommon.functionEnabledAyFalse) pc.y = 1.0 / pc.y;
	if (!fractal->transformCommon.functionEnabledAzFalse) pc.z = 1.0 / pc.z;

	if (fractal->transformCommon.functionEnabledAFalse)
	{
		pc.x = min(fabs(pc.x), fractal->transformCommon.scale1);
		pc.y = min(fabs(pc.y), fractal->transformCommon.scale1);
		pc.z = min(fabs(pc.z), fractal->transformCommon.scale1);
	}

	z.x += pc.x * fractal->transformCommon.constantMultiplier111.x;
	z.y += pc.y * fractal->transformCommon.constantMultiplier111.y;
	z.z += pc.z * fractal->transformCommon.constantMultiplier111.z;

	// DE tweak
	if (fractal->analyticDE.enabledFalse)
		aux->DE = aux->DE * fractal->analyticDE.scale1 + fractal->analyticDE.offset0;

	return z;
}
