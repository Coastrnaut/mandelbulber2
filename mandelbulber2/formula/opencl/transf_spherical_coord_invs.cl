/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2020 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * inverted sphere z & c- A transform from M3D
 * @reference
 * http://www.fractalforums.com/mandelbulb-3d/custom-formulas-and-transforms-release-t17106/
 * updated v2.12

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the file "fractal_transf_spherical_inv_c.cpp" in the folder formula/definition
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 TransfSphericalCoordInvsIteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	Q_UNUSED(aux);

	REAL4 t = z;

	if (!fractal->transformCommon.functionEnabledFalse)
	{
		t.x = z.z * sin(z.x) * sin(z.y);
		t.y = z.z * cos(z.x);
		t.z = z.z * sin(z.x) * cos(z.y);
	}
	else
	{
		t.y = z.y * sin(z.x) * cos(z.z);
		t.x = z.y * sin(z.x) * sin(z.z);
		t.z = z.y * cos(z.x);
	}

	if (fractal->transformCommon.functionEnabledAFalse)
	{
		t.x = z.x * sin(z.y) * cos(z.z);
		t.y = z.x * sin(z.y) * sin(z.z);
		t.z = z.x * cos(z.y);
	}

	z = t + fractal->transformCommon.offset000;

	return z;
}
