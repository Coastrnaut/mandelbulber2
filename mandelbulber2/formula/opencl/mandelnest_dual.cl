/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2022 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Mandelnest refer Jeannot
 * https://fractalforums.org/share-a-fractal/22/mandelbrot-3d-mandelnest/4028/
 * also https://www.shadertoy.com/view/4lKfzy

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the file "fractal_mandelnest_v2.cpp" in the folder formula/definition
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 MandelnestDualIteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{

	REAL Power = fractal->transformCommon.scale5;

	// Dual +
	REAL4 zp = z;
	REAL M0 = length(zp);
	zp.x = asin(zp.x / M0); // dual+
	zp.y = asin(zp.y / M0);
	zp.z = asin(zp.z / M0);
	M0 = pow(M0, Power);
	zp *= Power;

	zp.x = sin(zp.x);
	zp.y = sin(zp.y);
	zp.z = sin(zp.z);
	REAL M1 = length(zp);
	zp = zp * M0 / M1;
	zp += fractal->transformCommon.offsetA000;
	zp += aux->const_c * fractal->transformCommon.constantMultiplierA111;

	// Dual -
	REAL4 zm = z;
	M0 = length(zm);
	zm.x = -asin(zm.x / M0); // dual-
	zm.y = -asin(zm.y / M0);
	zm.z = -asin(zm.z / M0);
	M0 = pow(M0, Power);
	zm *= Power;

	zm.x = sin(zm.x);
	zm.y = sin(zm.y);
	zm.z = sin(zm.z);
	M1 = length(zm);
	zm = zm * M0 / M1;
	zm += fractal->transformCommon.offsetA000;
	zm += aux->const_c * fractal->transformCommon.constantMultiplierA111;

	// Dual+ OR dual-
	M0 = length(zp);
	M1 = length(zm);
	if (M0<M1)
	{
		z = zp;
	}
	else
	{
		z = zm;
	}

	aux->DE = pow(aux->r, Power - 1.0f) * aux->DE * Power + 1.0f;

	if (fractal->analyticDE.enabledFalse)
	{
		aux->DE = aux->DE * fractal->analyticDE.scale1 + fractal->analyticDE.offset0;
		if (fractal->transformCommon.functionEnabledBFalse)
			aux->DE = max(aux->DE, fractal->analyticDE.offset2);

		if (fractal->transformCommon.functionEnabledDFalse)
		{
					REAL r = length(z);
			aux->dist = 0.5f * log(r) * r / aux->DE;
			aux->dist = min(aux->dist, fractal->analyticDE.offset1);
		}
	}



	/*REAL Power = fractal->bulb.power;
	REAL4 shift = fractal->transformCommon.offset000 * M_PI_F;
	REAL4 dual = fractal->transformCommon.scale3D111;



	REAL r = length(z);
	REAL rN = fractal->transformCommon.scale1 / r;
	aux->DE *= fabs(rN);

	if (fractal->transformCommon.functionEnabledFalse)
	{
		if (fractal->transformCommon.functionEnabledAxFalse) z.x = fabs(z.x);
		if (fractal->transformCommon.functionEnabledAyFalse) z.y = fabs(z.y);
		if (fractal->transformCommon.functionEnabledAzFalse) z.z = fabs(z.z);
	}

	REAL4 temp = z * rN;
	if (!fractal->transformCommon.functionEnabledBxFalse)
		temp.x = asin(temp.x);
	else
		temp.x = acos(temp.x);
	if (!fractal->transformCommon.functionEnabledByFalse)
		temp.y = asin(temp.y);
	else
		temp.y = acos(temp.y);
	if (!fractal->transformCommon.functionEnabledBzFalse)
		temp.z = asin(temp.z);
	else
		temp.z = acos(temp.z);

	temp = shift + Power * dual * temp;

	if (!fractal->transformCommon.functionEnabledCxFalse)
		z.x = native_sin(temp.x);
	else
		z.x = native_cos(temp.x);
	if (!fractal->transformCommon.functionEnabledCyFalse)
		z.y = native_sin(temp.y);
	else
		z.y = native_cos(temp.y);
	if (!fractal->transformCommon.functionEnabledCzFalse)
		z.z = native_sin(temp.z);
	else
		z.z = native_cos(temp.z);

	if (!fractal->transformCommon.functionEnabledAFalse)
	{
		rN = 1.0f / length(z);
		z *= rN;
		aux->DE *= rN;
	}

	z *= pow(r, Power - fractal->transformCommon.offset1);

	if (aux->i >= fractal->transformCommon.startIterationsS
			&& aux->i < fractal->transformCommon.stopIterationsS)
		z += fractal->transformCommon.offsetF000;

	r = length(z);

	aux->DE = aux->DE * Power * r + 1.0f;
	if (fractal->analyticDE.enabledFalse)
	{
		aux->DE = aux->DE * fractal->analyticDE.scale1 + fractal->analyticDE.offset0;

		// aux->dist
		if (fractal->transformCommon.functionEnabledDFalse)
		{
			aux->DE0 = 0.5f * log(r) * r / aux->DE;

			if (aux->i <= fractal->transformCommon.startIterationsE)
				aux->dist = min(aux->DE0, fractal->analyticDE.offset1);
			else
				aux->dist = min(aux->dist, aux->DE0); // hybrid
		}
	}**/


	return z;
}
