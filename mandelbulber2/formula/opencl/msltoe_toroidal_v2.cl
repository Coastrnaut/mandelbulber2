/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2020 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * MsltoeToroidal
 * @reference http://www.fractalforums.com/theory/toroidal-coordinates/msg9428/

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the file "fractal_msltoe_toroidal.cpp" in the folder formula/definition
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 MsltoeToroidalV2Iteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	if (fractal->transformCommon.functionEnabledFalse
			&& aux->i >= fractal->transformCommon.startIterationsD
			&& aux->i < fractal->transformCommon.stopIterationsD1) // pre-scale
	{
		z *= fractal->transformCommon.scale3D111;
		aux->DE *= length(z) / aux->r;
	}



	{
		REAL temp;

		// Toroidal bulb
		REAL r1 = fractal->transformCommon.minR05; // default 0.5f
		REAL theta = atan2(z.y, z.x);
		REAL x1 = r1 * cos(theta);
		REAL y1 = r1 * sin(theta);
		REAL rr;
		REAL r2;
		REAL r;

		if (!fractal->transformCommon.functionEnabledAFalse)
		{
			r2 = sqrt(z.x * z.x + z.y * z.y) - r1;
			rr = r2 * r2;
		}
		else
		{
			rr = (z.x - x1) * (z.x - x1) + (z.y - y1) * (z.y - y1);
		}

		r = rr + z.z * z.z;
		r = sqrt(r);



		aux->DE *= aux->r / r;
		if (fractal->transformCommon.functionEnabledAyFalse) aux->DE *= aux->r / r;

		temp = r;


		REAL phi;

		if (!fractal->transformCommon.functionEnabledFFalse)
		{
			rr = (z.x - x1) * (z.x - x1) + (z.y - y1) * (z.y - y1);
		}
		else
		{
			rr = (z.x * z.x + z.y * z.y) - r1;
		}

		if (fractal->transformCommon.functionEnabledBFalse) temp = rr;
		if (fractal->transformCommon.functionEnabledCFalse) temp = rr + z.z * z.z;
		if (fractal->transformCommon.functionEnabledDFalse) temp = rr * rr;
		if (fractal->transformCommon.functionEnabledEFalse) temp = sqrt(rr);
		phi = atan2(z.z , temp);

		//phi = atan2(z.z, temp); // pppppppppppppppppppppppppppppppppppppppppppppppp
		if (fractal->transformCommon.functionEnabledXFalse)
			phi = atan2(z.z, sqrt(z.x * z.x + z.y * z.y) - r1);
		if (fractal->transformCommon.functionEnabledYFalse)
			phi = asin(z.z / r);
	REAL rp;
		r = r + (aux->r - r) * fractal->transformCommon.offsetR0;
		rp = pow(r, fractal->bulb.power - 1.0);


		aux->DE = rp * aux->DE * (fractal->bulb.power + fractal->analyticDE.offset0) + 1.0;


		rp *= r;

		phi *= fractal->transformCommon.pwr8; // default 8
		theta *= fractal->bulb.power; // default 9 gives 8 symmetry

		// convert back to cartesian coordinates
		if (!fractal->transformCommon.functionEnabledSwFalse)
		{
			REAL r1RpCosPhi = r1 + rp * cos(phi);
			z.x = r1RpCosPhi * cos(theta);
			z.y = r1RpCosPhi * sin(theta);
		}
		else
		{
			z.x = (sign(z.x) * x1 + rp * cos(phi)) * cos(theta);
			z.y = (sign(z.y) * y1 + rp * cos(phi)) * sin(theta);
		}
		z.z = -rp * sin(phi);

	}

	aux->DE = aux->DE
					* fractal->analyticDE.scale1;

	z.z *= fractal->transformCommon.scaleA1;

	if (fractal->transformCommon.functionEnabledAxFalse) // spherical offset
	{
		REAL lengthTempZ = -length(z);
		// if (lengthTempZ > -1e-21f) lengthTempZ = -1e-21f;   //  z is neg.)
		z *= 1.0f + fractal->transformCommon.offset / lengthTempZ;
		z *= fractal->transformCommon.scale;
		aux->DE = aux->DE * fabs(fractal->transformCommon.scale) + 1.0f;
	}
	// then add Cpixel constant vector
	return z;
}
