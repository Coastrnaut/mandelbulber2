/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2021 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * MengerV6Iteration
 * #info Created by blepfo 2020-05-28
 * https://www.shadertoy.com/view/wsjfzd

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the file "fractal_menger_v3.cpp" in the folder formula/definition
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 MengerV6Iteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	REAL t;
	REAL4 n;
	z.y  *= -fractal->transformCommon.scaleA1;
	z  *=  0.5f;

	for (int k = 0; k < fractal->transformCommon.int8X; k++)
	{
		z *= fractal->transformCommon.scale3;
		aux->DE *= fractal->transformCommon.scale3;
		REAL4 Offset1 = fractal->transformCommon.offset222;
		z.y = z.y - (2.0f * max(z.y, 0.0f)) + Offset1.y;
		z.x = -(z.x - (2.0f * max(z.x, 0.0f)) + Offset1.x);

		t = fractal->transformCommon.cosA;
		n = (REAL4){t * fractal->transformCommon.sinB, fractal->transformCommon.sinA, t * fractal->transformCommon.cosB, 0.0f};

		t = length(n);
		if (t == 0.0f) t = 1e-21f;
		n /= t;
		t = dot(z, n) * 2.0f;
		z -= max(t, 0.0f) * n;

		z.z -= -Offset1.z;

		t = cos(fractal->transformCommon.angle0);
		n = (REAL4){t * fractal->transformCommon.sinC, sin(-fractal->transformCommon.angle0), t * fractal->transformCommon.cosC, 0.0f};
		t = length(n);
		if (t == 0.0f) t = 1e-21f;
		n /= t;
		t = dot(z, n) * 2.0f;
		z -= max(t, 0.0f) * n;
		t = max((z.x + z.y), 0.0f);
		z.y = z.y - t;
		z.x = z.x - t + fractal->transformCommon.offset2;
		z.x = z.x - (2.0 * max(z.x, 0.0f)) + fractal->transformCommon.offsetA1;
		z.x = z.x - (2.0 * max(z.x, 0.0f)) + fractal->transformCommon.offsetT1;

		t = max((z.x + z.y), 0.0f);
		z.x = z.x - t;
		z.y = z.y - t;

		z = Matrix33MulFloat4(fractal->transformCommon.rotationMatrix2, z);

		//REAL r = dot(z, z);
	}

	REAL4 edgeDist = fabs(z) - (REAL4){1.0f, 1.0f, 1.0f, 0.0f};
	edgeDist.x = max(edgeDist.x, 0.0f);
	edgeDist.y = max(edgeDist.y, 0.0f);
	edgeDist.z = max(edgeDist.z, 0.0f);
	t = length(edgeDist); // + min(max(edgeDist.x, max(edgeDist.y, edgeDist.z)));

	t /= aux->DE;

	REAL colDist = aux->dist;
	if (!fractal->analyticDE.enabledFalse)
		aux->dist = t;
	else
		aux->dist = min(aux->dist, t);

	if (fractal->foldColor.auxColorEnabledFalse)
	{
		REAL colorAdd = 0.0f;
		if (colDist != aux->dist) colorAdd = fractal->foldColor.difs0000.x;
		//if (t <= e) colorAdd = fractal->foldColor.difs0000.y;

		aux->color += colorAdd;
	}

	return z;
}
