/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2021 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * https://nylander.wordpress.com/2009/07/03/3d-mandelbrot-set-2/

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the file "fractal_testing_log.cpp" in the folder formula/definition
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 TestingLogIteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	if (fractal->transformCommon.functionEnabledAFalse
			&& aux->i >= fractal->transformCommon.startIterationsA
			&& aux->i < fractal->transformCommon.stopIterationsA)
	{
		if (fractal->transformCommon.functionEnabledAxFalse) z.x = fabs(z.x);
		if (fractal->transformCommon.functionEnabledAyFalse) z.y = fabs(z.y);
		if (fractal->transformCommon.functionEnabledAzFalse) z.z = fabs(z.z);
	}
	aux->DE = aux->DE * 2.0f * length(z) + 1.0f;

	REAL4 ZZ = z * z;
	REAL rr = ZZ.x + ZZ.y;
	REAL theta = atan2(z.z, native_sqrt(rr));
	rr += ZZ.z;
	REAL phi = atan2(z.y, z.x);
	REAL thetatemp = theta;

	REAL phi_pow = 2.0f * phi + M_PI_F;
	REAL theta_pow = theta + M_PI_F + (M_PI_F / 2.0f); // piAdd;+ native_divide(M_PI_F, 2.0f)
	if (fractal->transformCommon.functionEnabledBFalse) theta_pow = theta + (M_PI_F / 4.0f);
	// theta_pow = theta + thetatemp + native_divide(M_PI_F, 2.0f);
	if (fractal->transformCommon.functionEnabledCFalse) theta_pow = theta + thetatemp + M_PI_F;

	REAL rn_sin_theta_pow = rr * native_sin(theta_pow);
	z.x = rn_sin_theta_pow * native_cos(phi_pow); //  + jx
	z.y = rn_sin_theta_pow * native_sin(phi_pow); // + jy
	z.z = rr * native_cos(theta_pow);							//  + jz

	/*if (fractal->transformCommon.functionEnabled)
	{
		aux->DE = aux->DE * 2.0f * length(z) + 1.0f;

		REAL temp = z.x * z.x + z.y * z.y + fractal->transformCommon.offset0;
		if (temp == 0.0f) z = aux->const_c;
		else if (temp < 0.0f) z = (REAL4) {0.0f, 0.0f, 0.0f, 0.0f};
		else
		{
			Mul = fractal->transformCommon.constantMultiplier122;
			REAL ZR = fractal->transformCommon.offset1;
			Mul.z = -Mul.z * z.z * native_sqrt(temp);
			temp = ZR - z.z * z.z / temp;
			Mul.x = Mul.x * (z.x * z.x - z.y * z.y) * temp;
			Mul.y = Mul.y * z.x * z.y * temp;
			z = Mul;

			// offset (Julia)
			z += fractal->transformCommon.additionConstant000;
		}
	}

	if (fractal->transformCommon.functionEnabledFalse)
	{
		aux->DE = aux->DE * 2.0f * length(z) + 1.0f;

		REAL temp = z.z * z.z + z.y * z.y + fractal->transformCommon.offsetA0;
		if (temp == 0.0f) z = aux->const_c;
		else if (temp < 0.0f) z = (REAL4) {0.0f, 0.0f, 0.0f, 0.0f};
		else
		{
			Mul = fractal->transformCommon.constantMultiplier221;
			REAL ZR = fractal->transformCommon.offsetA1;
			Mul.x = -Mul.x * z.x * native_sqrt(temp);
			temp = ZR - z.x * z.x / temp;
			Mul.z = Mul.z * (z.z * z.z - z.y * z.y) * temp;
			Mul.y = Mul.y * z.z * z.y * temp;
			z = Mul;

			// offset (Julia)
			z += fractal->transformCommon.additionConstantA000;
		}
	}*/

	z = Matrix33MulFloat4(fractal->transformCommon.rotationMatrix, z);

	// DE tweak
	if (fractal->analyticDE.enabledFalse)
		aux->DE = aux->DE * fractal->analyticDE.scale1 + fractal->analyticDE.offset0;
	return z;
}